rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isDriver() {
      return exists(/databases/$(database)/documents/drivers/$(request.auth.uid));
    }

    function isPassengerOfTrip(tripId) {
      return request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId;
    }

    match /drivers/{userId} {
      // Solo el propio conductor puede leer sus datos.
      allow read: if request.auth.uid == userId;

      // Solo el conductor puede crear o eliminar su perfil.
      allow create, delete: if request.auth.uid == userId;

      // Un conductor puede actualizar su propio perfil.
      // Un pasajero puede actualizar el perfil de un conductor SOLO si los únicos
      // campos que se modifican son los relacionados a la valoración y viajes completados.
      allow update: if request.auth.uid == userId ||
                     (request.auth != null && 
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['rating', 'ratingCount', 'completedTrips', 'lastRatedByTripId']));

      match /ratings/{ratingId} {
        // Cualquier usuario autenticado puede leer las valoraciones.
        allow read: if request.auth != null;

        // Solo un pasajero que participó en el viaje puede crear una valoración.
        allow create: if request.auth != null && isPassengerOfTrip(request.resource.data.tripId);
      }
    }

    match /users/{userId} {
      // Solo el propio usuario puede leer y escribir en su perfil.
      allow read, write: if request.auth.uid == userId;
    }

    match /trips/{tripId} {
      // Permite la lectura si:
      // 1. El viaje está en búsqueda y el usuario es un conductor.
      // 2. El usuario es el pasajero del viaje.
      // 3. El usuario es el conductor asignado al viaje.
      allow read: if request.auth != null &&
                   (
                    (resource.data.status == 'searching' && isDriver()) ||
                    (request.auth.uid == resource.data.passengerId) ||
                    (resource.data.driverId != null && request.auth.uid == resource.data.driverId)
                   );

      // Solo el pasajero puede crear su propia solicitud de viaje.
      allow create: if request.auth != null && request.resource.data.passengerId == request.auth.uid;

      // Solo el pasajero puede eliminar su propia solicitud de viaje.
      allow delete: if request.auth != null && resource.data.passengerId == request.auth.uid;

      // Permite la actualización si:
      // 1. El usuario es el pasajero del viaje.
      // 2. El usuario es el conductor asignado al viaje.
      // 3. Un conductor se está asignando a un viaje que no tiene conductor.
      allow update: if request.auth != null &&
                     (
                      (request.auth.uid == resource.data.passengerId) ||
                      (resource.data.driverId != null && request.auth.uid == resource.data.driverId) ||
                      (isDriver() && resource.data.driverId == null && request.resource.data.driverId == request.auth.uid)
                     );

      match /offers/{offerId} {
        // Un conductor puede crear una oferta.
        allow create: if isDriver() && request.resource.data.driverId == request.auth.uid;
        
        // El pasajero del viaje o el conductor que creó la oferta pueden leerla/actualizarla.
        allow read, update: if request.auth != null &&
                             (isPassengerOfTrip(tripId) || request.auth.uid == resource.data.driverId);
      }

      match /messages/{messageId} {
        // El pasajero o el conductor asignado al viaje pueden leer y crear mensajes.
        allow read, create: if request.auth != null &&
                              (isPassengerOfTrip(tripId) || 
                               (get(/databases/$(database)/documents/trips/$(tripId)).data.driverId != null &&
                                request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.driverId));
      }
    }
  }
}
