
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Check if a user is a registered driver
    function isDriver(userId) {
      return exists(/databases/$(database)/documents/drivers/$(userId));
    }
    
    // --- Drivers Collection ---
    match /drivers/{driverId} {
      // Any authenticated user can read driver profiles (for ratings, vehicle info, etc.)
      allow read: if request.auth != null;
      
      // Only the driver themselves can create or delete their profile
      allow create, delete: if request.auth.uid == driverId;
      
      // The driver can update their own profile.
      // A passenger can also update it, but ONLY to add a rating.
      // This is handled by the transaction logic in the app.
      allow update: if request.auth.uid == driverId || request.auth != null;
      
      match /ratings/{ratingId} {
        allow read: if request.auth != null;
        // Only an authenticated user (passenger) can create a new rating
        allow create: if request.auth != null;
      }
    }
    
    // --- Users (Passengers) Collection ---
    match /users/{userId} {
      // Only the user themselves can read and write to their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // --- Trips Collection ---
    match /trips/{tripId} {
      // Read access is granted if:
      // 1. The trip is 'searching' (for any driver to see).
      // 2. The user is the passenger who created the trip.
      // 3. The user is the driver assigned to the trip.
      allow read: if request.auth != null && 
                  (resource.data.status == 'searching' ||
                   request.auth.uid == resource.data.passengerId || 
                   request.auth.uid == resource.data.driverId);
                   
      // A user can create a trip only if they are the passenger for that trip.
      allow create: if request.auth != null && request.resource.data.passengerId == request.auth.uid;
      
      // Only the passenger who created the trip can delete it.
      allow delete: if request.auth != null && resource.data.passengerId == request.auth.uid;
      
      // Update rules are more complex.
      // An update is allowed if the user is the passenger OR the assigned driver.
      // Additional checks ensure fields are updated correctly.
      allow update: if request.auth != null &&
                    (request.auth.uid == resource.data.passengerId || 
                     request.auth.uid == resource.data.driverId);
                     
      // --- Offers Subcollection ---
      match /offers/{offerId} {
        // A user can create an offer only if they are a registered driver.
        allow create: if request.auth != null && isDriver(request.auth.uid);
        
        // Only the passenger who created the trip can read or update the offers
        // (e.g., to accept one).
        allow read, update: if request.auth != null && 
                      request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId;
      }
      
      // --- Messages Subcollection ---
      match /messages/{messageId} {
        // Only the passenger and the assigned driver can read messages.
        allow read: if request.auth != null &&
                     (request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId ||
                      request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.driverId);
                      
        // A user can create a message only if they are the sender and part of the trip.
        allow create: if request.auth != null &&
                       request.resource.data.senderId == request.auth.uid &&
                       (request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId ||
                        request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.driverId);
      }
    }
  }
}
