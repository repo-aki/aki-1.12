rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isDriver() {
      return exists(/databases/$(database)/documents/drivers/$(request.auth.uid));
    }

    function isPassengerOfTrip(tripId) {
      let tripData = get(/databases/$(database)/documents/trips/$(tripId)).data;
      return request.auth.uid == tripData.passengerId;
    }

    function isDriverOfTrip(tripId) {
      let tripData = get(/databases/$(database)/documents/trips/$(tripId)).data;
      return tripData.driverId != null && request.auth.uid == tripData.driverId;
    }

    // --- Drivers Collection ---
    match /drivers/{userId} {
      // Anyone authenticated can read driver profiles (for offers, ratings, etc.)
      allow read: if request.auth != null;
      
      // Only the driver can create or delete their own profile.
      allow create, delete: if isOwner(userId);

      // A driver can update their own profile.
      // A passenger can update the driver's profile ONLY to add a rating or update completed trips.
      allow update: if isOwner(userId) ||
                     (request.auth != null && 
                      (
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rating', 'ratingCount', 'completedTrips', 'lastRatedByTripId'])
                      )
                     );

      // --- Ratings Sub-collection ---
      match /ratings/{ratingId} {
        allow read: if request.auth != null;
        
        // Only a passenger who was on the specific trip can create a rating.
        allow create: if request.auth != null &&
                       isPassengerOfTrip(request.resource.data.tripId);
      }
    }

    // --- Users (Passengers) Collection ---
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // --- Trips Collection ---
    match /trips/{tripId} {
      // Allow read if:
      // 1. A driver is searching for trips.
      // 2. The user is the passenger of the trip.
      // 3. The user is the assigned driver of the trip.
      // 4. A driver is checking a trip they sent an offer to.
      allow read: if request.auth != null && 
                   (
                    (resource.data.status == 'searching' && isDriver()) ||
                    isPassengerOfTrip(tripId) || 
                    isDriverOfTrip(tripId) ||
                    (isDriver() && exists(/databases/$(database)/documents/trips/$(tripId)/offers/$(request.auth.uid)))
                   );

      allow create: if isPassengerOfTrip(tripId);
      allow delete: if isPassengerOfTrip(tripId);
      
      // Allow update if the user is the passenger or the assigned driver.
      // Also allow a driver to assign themselves if the trip has no driver.
      allow update: if request.auth != null &&
                    (
                     isPassengerOfTrip(tripId) || 
                     isDriverOfTrip(tripId) ||
                     (isDriver() && resource.data.driverId == null && request.resource.data.driverId == request.auth.uid)
                    );

      // --- Offers Sub-collection ---
      match /offers/{offerId} {
        // A user can create an offer only if they are a driver.
        allow create: if isDriver() && request.resource.data.driverId == request.auth.uid;
        
        // The passenger of the trip and the driver who made the offer can read/update it.
        allow read, update: if request.auth != null && 
                             (
                               isPassengerOfTrip(tripId) ||
                               request.auth.uid == resource.data.driverId
                             );
      }
      
      // --- Messages Sub-collection ---
      match /messages/{messageId} {
      	// Only the passenger and the driver of the trip can read/create messages.
      	allow read, create: if request.auth != null &&
                             (
                               isPassengerOfTrip(tripId) || isDriverOfTrip(tripId)
                             );
      }
    }
  }
}
