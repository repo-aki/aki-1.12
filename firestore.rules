rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /drivers/{userId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || 
                    (request.auth != null && request.resource.data.rating != resource.data.rating); // Allow rating updates
      
      match /ratings/{ratingId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
      }
    }

    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /trips/{tripId} {
      // READ is allowed if:
      // 1. A user is authenticated AND
      // 2. Any of the following is true:
      //    a. The trip is open for bidding.
      //    b. The request is from the assigned passenger.
      //    c. The request is from the assigned driver.
      //    d. The trip is in the 'driver_en_route' state (allows newly assigned driver to read).
      allow read: if request.auth != null && 
                  (resource.data.status == 'searching' ||
                   request.auth.uid == resource.data.passengerId || 
                   request.auth.uid == resource.data.driverId ||
                   resource.data.status == 'driver_en_route');

      allow create: if request.auth != null && request.resource.data.passengerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.passengerId == request.auth.uid;
      
      // UPDATE is allowed if:
      // 1. A user is authenticated AND
      // 2. Any of the following is true:
      //    a. The request is from the assigned passenger.
      //    b. The request is from the assigned driver.
      //    c. A driver is accepting the trip (updating with their ID).
      allow update: if request.auth != null &&
                    (request.auth.uid == resource.data.passengerId ||
                     request.auth.uid == resource.data.driverId ||
                     (request.resource.data.driverId == request.auth.uid && resource.data.driverId == null));

      match /offers/{offerId} {
        allow create: if request.auth != null && exists(/databases/$(database)/documents/drivers/$(request.auth.uid));
        allow read, update: if request.auth != null && 
                              (request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId ||
                               request.auth.uid == request.resource.data.driverId);
      }
      
      match /messages/{messageId} {
      	allow read: if request.auth != null &&
                     (request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId ||
                      request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.driverId);
        
        allow create: if request.auth != null &&
                       request.resource.data.senderId == request.auth.uid &&
                       (request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId ||
                        request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.driverId);
      }
    }
  }
}
