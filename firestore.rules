
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- Colección de Conductores (drivers) ---
    match /drivers/{userId} {
      // Cualquiera autenticado puede leer el perfil de un conductor.
      allow read: if request.auth != null;
      // Solo el propietario puede crear, actualizar o eliminar su perfil.
      allow create, delete: if isOwner(userId);
      allow update: if isOwner(userId);

      // --- Sub-colección de Valoraciones (ratings) ---
      match /ratings/{ratingId} {
        allow read: if request.auth != null;
        // Solo un usuario autenticado (pasajero) puede crear una nueva valoración.
        allow create: if request.auth != null;
      }
    }

    // --- Colección de Usuarios (users - Pasajeros) ---
    match /users/{userId} {
      // Cualquiera autenticado puede leer datos (para perfiles públicos, etc.)
      allow read: if request.auth != null;
      // El propietario puede crear, actualizar o eliminar su perfil.
      allow write: if isOwner(userId);
    }
    
    // --- Colección de Viajes (trips) ---
    match /trips/{tripId} {
      function isPassenger() {
        return isOwner(resource.data.passengerId);
      }
      function isDriver() {
        return resource.data.driverId != null && isOwner(resource.data.driverId);
      }
      
      // Leer:
      // - Cualquiera autenticado si el viaje está en 'searching'.
      // - El pasajero o el conductor asignado en cualquier otro estado.
      allow read: if request.auth != null && 
                  (resource.data.status == 'searching' || isPassenger() || isDriver());
      
      // Crear: solo el pasajero puede crear una solicitud de viaje.
      allow create: if isOwner(request.resource.data.passengerId);

      // Actualizar:
      allow update: if request.auth != null && (isPassenger() || isDriver());
      
      // Eliminar: solo el pasajero puede eliminar su solicitud.
      allow delete: if isPassenger();

      // --- Sub-colección de Ofertas (offers) ---
      match /offers/{offerId} {
        function isTripPassenger() {
          return request.auth != null && request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId;
        }
        
        // Un conductor registrado puede crear una oferta.
        allow create: if request.auth != null && exists(/databases/$(database)/documents/drivers/$(request.auth.uid));
        
        // El pasajero del viaje puede leer y actualizar (aceptar/rechazar) ofertas.
        allow read, update: if isTripPassenger();
      }
      
      // --- Sub-colección de Mensajes (messages) ---
      match /messages/{messageId} {
        function isTripParticipant() {
          let trip = get(/databases/$(database)/documents/trips/$(tripId)).data;
          return request.auth != null && (request.auth.uid == trip.passengerId || request.auth.uid == trip.driverId);
        }
        
        // Solo los participantes del viaje pueden leer y escribir mensajes.
        allow read, create: if isTripParticipant();
      }
    }
  }
}
