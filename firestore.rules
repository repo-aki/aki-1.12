rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Función para verificar si el usuario autenticado es un conductor.
    function isDriver() {
      return exists(/databases/$(database)/documents/drivers/$(request.auth.uid));
    }

    // Función para verificar si el usuario es el pasajero de un viaje específico.
    function isPassengerOfTrip(tripId) {
      return request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId;
    }

    // Reglas para la colección de conductores
    match /drivers/{userId} {
      // Un conductor puede leer su propio perfil.
      // Un pasajero puede leer el perfil del conductor si están en un viaje juntos.
      allow read: if request.auth.uid == userId ||
                   (
                    request.auth != null && 
                    exists( /databases/$(database)/documents/trips/
                            where passengerId == request.auth.uid 
                            and driverId == userId
                          )
                   );
      
      // Solo el conductor puede crear o eliminar su propio perfil.
      allow create, delete: if request.auth.uid == userId;

      // SOLUCIÓN PARA ERRORES DE PERMISOS:
      // Se permite la actualización si:
      // 1. Es el propio conductor.
      // 2. Es un pasajero que SOLO está actualizando las estadísticas de valoración/viajes.
      allow update: if request.auth.uid == userId ||
                     (request.auth != null &&
                      (
                        request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['rating', 'ratingCount', 'completedTrips', 'lastRatedByTripId'])
                      )
                     );

      // Reglas para la subcolección de valoraciones de un conductor
      match /ratings/{ratingId} {
        allow read: if request.auth != null;
        
        // REGLA MEJORADA: Solo un pasajero autenticado que haya completado un viaje
        // puede crear una valoración para el conductor.
        allow create: if request.auth != null &&
                       exists(/databases/$(database)/documents/trips/$(request.resource.data.tripId)) &&
                       isPassengerOfTrip(request.resource.data.tripId);
      }
    }

    // Reglas para la colección de usuarios (pasajeros)
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Reglas para la colección de viajes
    match /trips/{tripId} {
      // Un conductor puede leer un viaje si está en búsqueda.
      // El pasajero o el conductor asignado pueden leer el viaje.
      // O un conductor puede leer un viaje si ha enviado una oferta para él.
      allow read: if request.auth != null &&
                   (
                    (resource.data.status == 'searching' && isDriver()) ||
                    (request.auth.uid == resource.data.passengerId) ||
                    (resource.data.driverId != null && request.auth.uid == resource.data.driverId) ||
                    (isDriver() && exists(/databases/$(database)/documents/trips/$(tripId)/offers/$(request.auth.uid)))
                   );

      allow create: if request.auth != null && request.resource.data.passengerId == request.auth.uid;
      
      allow delete: if request.auth != null && resource.data.passengerId == request.auth.uid;
      
      // El pasajero, el conductor asignado, o un conductor que se está asignando pueden actualizar el viaje.
      allow update: if request.auth != null &&
                     (
                      (request.auth.uid == resource.data.passengerId) ||
                      (resource.data.driverId != null && request.auth.uid == resource.data.driverId) ||
                      (isDriver() && resource.data.driverId == null && request.resource.data.driverId == request.auth.uid)
                     );

      // Reglas para la subcolección de ofertas de un viaje
      match /offers/{offerId} {
        allow create: if isDriver() && request.resource.data.driverId == request.auth.uid;
        
        allow read, update: if request.auth != null &&
                             (
                               isPassengerOfTrip(tripId) ||
                               request.auth.uid == resource.data.driverId
                             );
      }

      // Reglas para la subcolección de mensajes de un viaje
      match /messages/{messageId} {
        allow read, create: if request.auth != null &&
                              (
                                isPassengerOfTrip(tripId) ||
                                (get(/databases/$(database)/documents/trips/$(tripId)).data.driverId != null &&
                                 request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.driverId)
                              );
      }
    }
  }
}
