rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isDriver() {
      return exists(/databases/$(database)/documents/drivers/$(request.auth.uid));
    }

    // Un pasajero puede leer los datos del conductor si está en un viaje con él.
    // El conductor puede leer sus propios datos.
    match /drivers/{userId} {
      allow read: if request.auth.uid == userId ||
                   exists(/databases/$(database)/documents/trips/{tripId}) &&
                   (
                     get(/databases/$(database)/documents/trips/{tripId}).data.passengerId == request.auth.uid &&
                     get(/databases/$(database)/documents/trips/{tripId}).data.driverId == userId
                   );
      allow create: if request.auth.uid == userId;
      // Un pasajero puede actualizar la calificación del conductor, pero solo los campos de calificación.
      allow update: if request.auth.uid == userId ||
                     (request.auth != null &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rating', 'ratingCount']));
      allow delete: if request.auth.uid == userId;
    }

    match /drivers/{driverId}/ratings/{ratingId} {
      allow read: if request.auth != null;
      // Un pasajero puede crear una valoración si completó un viaje con ese conductor.
      allow create: if request.auth != null &&
                     exists(/databases/$(database)/documents/trips/$(request.resource.data.tripId)) &&
                     get(/databases/$(database)/documents/trips/$(request.resource.data.tripId)).data.passengerId == request.auth.uid &&
                     get(/databases/$(database)/documents/trips/$(request.resource.data.tripId)).data.driverId == driverId;
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /trips/{tripId} {
      allow read: if request.auth != null &&
                   (
                    (resource.data.status == 'searching' && isDriver()) ||
                    (request.auth.uid == resource.data.passengerId) ||
                    (resource.data.driverId != null && request.auth.uid == resource.data.driverId) ||
                    // Permite a un conductor leer un viaje si ha hecho una oferta en él.
                    exists(/databases/$(database)/documents/trips/$(tripId)/offers/$(offerId)) &&
                    get(/databases/$(database)/documents/trips/$(tripId)/offers/$(offerId)).data.driverId == request.auth.uid
                   );
      allow create: if request.auth != null && request.resource.data.passengerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.passengerId == request.auth.uid;
      allow update: if request.auth != null &&
                     (
                      (request.auth.uid == resource.data.passengerId) ||
                      (resource.data.driverId != null && request.auth.uid == resource.data.driverId) ||
                      (isDriver() && resource.data.driverId == null && request.resource.data.driverId == request.auth.uid)
                     );

      match /offers/{offerId} {
        allow create: if isDriver() && request.resource.data.driverId == request.auth.uid;
        allow read, update: if request.auth != null &&
                             (request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId ||
                              request.auth.uid == request.resource.data.driverId);
      }

      match /messages/{messageId} {
        allow read, create: if request.auth != null &&
                              (request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.passengerId ||
                               request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.driverId);
      }
    }
  }
}
